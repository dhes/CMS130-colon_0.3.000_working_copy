{
  "resourceType": "Library",
  "id": "CumulativeMedicationDuration",
  "extension": [ {
    "url": "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://ecqi.healthit.gov/ecqms/Library/CumulativeMedicationDuration",
  "version": "5.0.000",
  "name": "CumulativeMedicationDuration",
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  } ]
}